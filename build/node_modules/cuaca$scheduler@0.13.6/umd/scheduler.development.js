/**
 * @license React
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* eslint-disable max-len */

'use strict';

Liferay.Loader.define('cuaca$scheduler@0.13.6/umd/scheduler.development', ['module', 'exports', 'require', 'cuaca$react'], function (module, exports, require) {
  var define = undefined;
  (function (global, factory) {
    // eslint-disable-next-line no-unused-expressions
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('cuaca$react')) : typeof define === 'function' && define.amd // eslint-disable-line no-undef
    ? define(['react'], factory) // eslint-disable-line no-undef
    : global.Scheduler = factory(global);
  })(this, function (global) {

    return Object.freeze({
      unstable_now: function unstable_now() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_now.apply(this, arguments);
      },
      unstable_scheduleCallback: function unstable_scheduleCallback() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_scheduleCallback.apply(this, arguments);
      },
      unstable_cancelCallback: function unstable_cancelCallback() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_cancelCallback.apply(this, arguments);
      },
      unstable_shouldYield: function unstable_shouldYield() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_shouldYield.apply(this, arguments);
      },
      unstable_runWithPriority: function unstable_runWithPriority() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_runWithPriority.apply(this, arguments);
      },
      unstable_next: function unstable_next() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_next.apply(this, arguments);
      },
      unstable_wrapCallback: function unstable_wrapCallback() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_wrapCallback.apply(this, arguments);
      },
      unstable_getCurrentPriorityLevel: function unstable_getCurrentPriorityLevel() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_getCurrentPriorityLevel.apply(this, arguments);
      },
      unstable_continueExecution: function unstable_continueExecution() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_continueExecution.apply(this, arguments);
      },
      unstable_pauseExecution: function unstable_pauseExecution() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_pauseExecution.apply(this, arguments);
      },
      unstable_getFirstCallbackNode: function unstable_getFirstCallbackNode() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_getFirstCallbackNode.apply(this, arguments);
      },
      get unstable_IdlePriority() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_IdlePriority;
      },
      get unstable_ImmediatePriority() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_ImmediatePriority;
      },
      get unstable_LowPriority() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_LowPriority;
      },
      get unstable_NormalPriority() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_NormalPriority;
      },
      get unstable_UserBlockingPriority() {
        return global.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler.unstable_UserBlockingPriority;
      }
    });
  });
});
//# sourceMappingURL=scheduler.development.js.map