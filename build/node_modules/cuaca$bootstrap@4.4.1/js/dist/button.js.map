{"version":3,"sources":["../src/button.js"],"names":["NAME","DATA_KEY","EVENT_KEY","DATA_API_KEY","JQUERY_NO_CONFLICT","$","ClassName","ACTIVE","BUTTON","FOCUS","Selector","DATA_TOGGLE_CARROT","DATA_TOGGLES","DATA_TOGGLE","DATA_TOGGLES_BUTTONS","INPUT","Event","CLICK_DATA_API","FOCUS_BLUR_DATA_API","LOAD_DATA_API","Button","toggle","triggerChangeEvent","addAriaPressed","rootElement","input","activeElement","dispose","_jQueryInterface","data","config","button","event","inputBtn","buttons","document","i","len"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.4.1): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport $ from 'jquery'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME                = 'button'\nconst VERSION             = '4.4.1'\nconst DATA_KEY            = 'bs.button'\nconst EVENT_KEY           = `.${DATA_KEY}`\nconst DATA_API_KEY        = '.data-api'\nconst JQUERY_NO_CONFLICT  = $.fn[NAME]\n\nconst ClassName = {\n  ACTIVE : 'active',\n  BUTTON : 'btn',\n  FOCUS  : 'focus'\n}\n\nconst Selector = {\n  DATA_TOGGLE_CARROT   : '[data-toggle^=\"button\"]',\n  DATA_TOGGLES         : '[data-toggle=\"buttons\"]',\n  DATA_TOGGLE          : '[data-toggle=\"button\"]',\n  DATA_TOGGLES_BUTTONS : '[data-toggle=\"buttons\"] .btn',\n  INPUT                : 'input:not([type=\"hidden\"])',\n  ACTIVE               : '.active',\n  BUTTON               : '.btn'\n}\n\nconst Event = {\n  CLICK_DATA_API      : `click${EVENT_KEY}${DATA_API_KEY}`,\n  FOCUS_BLUR_DATA_API : `focus${EVENT_KEY}${DATA_API_KEY} ` +\n                          `blur${EVENT_KEY}${DATA_API_KEY}`,\n  LOAD_DATA_API       : `load${EVENT_KEY}${DATA_API_KEY}`\n}\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Button {\n  constructor(element) {\n    this._element = element\n  }\n\n  // Getters\n\n  static get VERSION() {\n    return VERSION\n  }\n\n  // Public\n\n  toggle() {\n    let triggerChangeEvent = true\n    let addAriaPressed = true\n    const rootElement = $(this._element).closest(\n      Selector.DATA_TOGGLES\n    )[0]\n\n    if (rootElement) {\n      const input = this._element.querySelector(Selector.INPUT)\n\n      if (input) {\n        if (input.type === 'radio') {\n          if (input.checked &&\n            this._element.classList.contains(ClassName.ACTIVE)) {\n            triggerChangeEvent = false\n          } else {\n            const activeElement = rootElement.querySelector(Selector.ACTIVE)\n\n            if (activeElement) {\n              $(activeElement).removeClass(ClassName.ACTIVE)\n            }\n          }\n        } else if (input.type === 'checkbox') {\n          if (this._element.tagName === 'LABEL' && input.checked === this._element.classList.contains(ClassName.ACTIVE)) {\n            triggerChangeEvent = false\n          }\n        } else {\n          // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input\n          triggerChangeEvent = false\n        }\n\n        if (triggerChangeEvent) {\n          input.checked = !this._element.classList.contains(ClassName.ACTIVE)\n          $(input).trigger('change')\n        }\n\n        input.focus()\n        addAriaPressed = false\n      }\n    }\n\n    if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {\n      if (addAriaPressed) {\n        this._element.setAttribute('aria-pressed',\n          !this._element.classList.contains(ClassName.ACTIVE))\n      }\n\n      if (triggerChangeEvent) {\n        $(this._element).toggleClass(ClassName.ACTIVE)\n      }\n    }\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY)\n    this._element = null\n  }\n\n  // Static\n\n  static _jQueryInterface(config) {\n    return this.each(function () {\n      let data = $(this).data(DATA_KEY)\n\n      if (!data) {\n        data = new Button(this)\n        $(this).data(DATA_KEY, data)\n      }\n\n      if (config === 'toggle') {\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n$(document)\n  .on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, (event) => {\n    let button = event.target\n\n    if (!$(button).hasClass(ClassName.BUTTON)) {\n      button = $(button).closest(Selector.BUTTON)[0]\n    }\n\n    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {\n      event.preventDefault() // work around Firefox bug #1540995\n    } else {\n      const inputBtn = button.querySelector(Selector.INPUT)\n\n      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {\n        event.preventDefault() // work around Firefox bug #1540995\n        return\n      }\n\n      Button._jQueryInterface.call($(button), 'toggle')\n    }\n  })\n  .on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, (event) => {\n    const button = $(event.target).closest(Selector.BUTTON)[0]\n    $(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type))\n  })\n\n$(window).on(Event.LOAD_DATA_API, () => {\n  // ensure correct active class is set to match the controls' actual values/states\n\n  // find all checkboxes/readio buttons inside data-toggle groups\n  let buttons = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLES_BUTTONS))\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i]\n    const input = button.querySelector(Selector.INPUT)\n    if (input.checked || input.hasAttribute('checked')) {\n      button.classList.add(ClassName.ACTIVE)\n    } else {\n      button.classList.remove(ClassName.ACTIVE)\n    }\n  }\n\n  // find all button toggles\n  buttons = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE))\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i]\n    if (button.getAttribute('aria-pressed') === 'true') {\n      button.classList.add(ClassName.ACTIVE)\n    } else {\n      button.classList.remove(ClassName.ACTIVE)\n    }\n  }\n})\n\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Button._jQueryInterface\n$.fn[NAME].Constructor = Button\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT\n  return Button._jQueryInterface\n}\n\nexport default Button\n"]}